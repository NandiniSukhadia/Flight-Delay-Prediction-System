# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sXVKAb1o5i0Px4bDDRsuXdx8h9rzMzKT
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from xgboost import XGBClassifier, XGBRegressor
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
    mean_absolute_error, mean_squared_error, r2_score, roc_curve
)

st.set_page_config(page_title="Flight Delay Prediction System", layout="wide")
st.title("Flight Delay Prediction System")

# Upload dataset
uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("Raw Dataset")
    st.dataframe(df.head())

    # Data Cleaning
    st.subheader("Data Cleaning")
    df.dropna(inplace=True)
    st.write("Removed missing values.")

    # EDA
    st.subheader("Exploratory Data Analysis")
    st.write("Shape of dataset:", df.shape)
    st.write("Data types:")
    st.write(df.dtypes)

    numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
    if numeric_cols:
        st.write("Correlation Heatmap:")
        corr = df[numeric_cols].corr()
        fig, ax = plt.subplots()
        sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax)
        st.pyplot(fig)

    # Feature and target selection
    target_column = st.selectbox("Select Target Column", df.columns)
    features = st.multiselect("Select Feature Columns", [col for col in df.columns if col != target_column])

    if features and target_column:
        X = df[features]
        y = df[target_column]

        # Encode categorical features
        X = pd.get_dummies(X, drop_first=True)
        if y.dtype == 'O':
            y = pd.factorize(y)[0]

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Choose model type
        model_type = st.selectbox("Select Model Type", ["Classification", "Regression"])

        if model_type == "Classification":
            model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
        else:
            model = XGBRegressor()

        # Train model
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        st.subheader("Model Performance")
        if model_type == "Classification":
            st.write("Accuracy:", accuracy_score(y_test, y_pred))
            st.write("Precision:", precision_score(y_test, y_pred, average='weighted'))
            st.write("Recall:", recall_score(y_test, y_pred, average='weighted'))
            st.write("F1-Score:", f1_score(y_test, y_pred, average='weighted'))
            try:
                st.write("ROC-AUC:", roc_auc_score(y_test, model.predict_proba(X_test), multi_class='ovr'))
            except:
                st.write("ROC-AUC: Not applicable for this classifier")
        else:
            st.write("MAE:", mean_absolute_error(y_test, y_pred))
            st.write("RMSE:", mean_squared_error(y_test, y_pred, squared=False))
            st.write("R^2 Score:", r2_score(y_test, y_pred))

else:
    st.info("Please upload a CSV file to proceed.")

