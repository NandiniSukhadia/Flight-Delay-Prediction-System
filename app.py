# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sXVKAb1o5i0Px4bDDRsuXdx8h9rzMzKT
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.svm import SVC
from xgboost import XGBClassifier, XGBRegressor
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
    mean_absolute_error, mean_squared_error, r2_score, roc_curve
)

# -------------------- Setup --------------------
st.set_page_config(page_title="Flight Delay Prediction", layout="wide")
st.title("‚úàÔ∏è Flight Delay Prediction Dashboard")

# -------------------- Upload Dataset --------------------
uploaded_file = st.file_uploader("Upload the flight dataset (.csv)", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df["Flight_Date"] = pd.to_datetime(df["Flight_Date"])
    df["Scheduled_Departure"] = pd.to_datetime(df["Scheduled_Departure"], format="%H:%M").dt.hour
    df["Scheduled_Arrival"] = pd.to_datetime(df["Scheduled_Arrival"], format="%H:%M").dt.hour
    df["Day_of_Week"] = df["Flight_Date"].dt.dayofweek
    df["Is_Weekend"] = df["Day_of_Week"].isin([5, 6]).astype(int)
    df["Is_Delayed"] = df["Flight_Status"].map({"On Time": 0, "Delayed": 1})

    le_dict = {}
    for col in ["Airline", "Origin_Airport", "Destination_Airport", "Weather_Conditions"]:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        le_dict[col] = le

    df_model = df.drop(columns=["Flight_ID", "Flight_Date", "Flight_Status"])

    # -------------------- EDA --------------------
    st.subheader("üìä Exploratory Data Analysis")
    with st.expander("Show Correlation Heatmap"):
        fig1, ax1 = plt.subplots(figsize=(10, 6))
        sns.heatmap(df_model.corr(), annot=True, cmap="coolwarm", ax=ax1)
        st.pyplot(fig1)

    with st.expander("Show Delay Distribution"):
        fig2, ax2 = plt.subplots()
        sns.histplot(df["Delay_Minutes"], bins=50, kde=True, ax=ax2)
        st.pyplot(fig2)

    # -------------------- Model Selection --------------------
    st.sidebar.title("‚öôÔ∏è Model Settings")
    model_type = st.sidebar.selectbox("Choose model for prediction", ["Random Forest", "SVM", "XGBoost"])

    # -------------------- Classification --------------------
    st.subheader("üîç Classification: Will the flight be delayed?")
    X_clf = df_model.drop(columns=["Is_Delayed", "Delay_Minutes"])
    y_clf = df_model["Is_Delayed"]

    X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(X_clf, y_clf, test_size=0.2, random_state=42)

    if model_type == "Random Forest":
        clf = RandomForestClassifier(n_estimators=100, random_state=42)
    elif model_type == "SVM":
        clf = SVC(probability=True)
    else:
        clf = XGBClassifier(use_label_encoder=False, eval_metric='logloss')

    clf.fit(X_train_c, y_train_c)
    y_pred_c = clf.predict(X_test_c)
    y_proba_c = clf.predict_proba(X_test_c)[:, 1]

    st.write("**Accuracy:**", accuracy_score(y_test_c, y_pred_c))
    st.write("**Precision:**", precision_score(y_test_c, y_pred_c))
    st.write("**Recall:**", recall_score(y_test_c, y_pred_c))
    st.write("**F1 Score:**", f1_score(y_test_c, y_pred_c))
    st.write("**ROC-AUC:**", roc_auc_score(y_test_c, y_proba_c))

    fpr, tpr, _ = roc_curve(y_test_c, y_proba_c)
    fig3, ax3 = plt.subplots()
    ax3.plot(fpr, tpr, label="ROC Curve")
    ax3.plot([0, 1], [0, 1], "k--")
    ax3.set_xlabel("False Positive Rate")
    ax3.set_ylabel("True Positive Rate")
    ax3.set_title("ROC Curve")
    st.pyplot(fig3)

    # -------------------- Regression --------------------
    st.subheader("üìà Regression: Predict delay minutes")
    X_reg = df_model.drop(columns=["Delay_Minutes"])
    y_reg = df_model["Delay_Minutes"]
    X_train_r, X_test_r, y_train_r, y_test_r = train_test_split(X_reg, y_reg, test_size=0.2, random_state=42)

    if model_type == "Random Forest":
        reg = RandomForestRegressor(n_estimators=100, random_state=42)
    elif model_type == "SVM":
        reg = XGBRegressor()  # Fallback for SVM regression
    else:
        reg = XGBRegressor()

    reg.fit(X_train_r, y_train_r)
    y_pred_r = reg.predict(X_test_r)

    st.write("**MAE:**", mean_absolute_error(y_test_r, y_pred_r))
    st.write("**RMSE:**", np.sqrt(mean_squared_error(y_test_r, y_pred_r)))
    st.write("**R¬≤ Score:**", r2_score(y_test_r, y_pred_r))

    # -------------------- Realtime Prediction --------------------
    st.subheader("üß™ Realtime Flight Prediction")

    with st.form("realtime_form"):
        airline = st.selectbox("Airline", le_dict["Airline"].classes_)
        origin = st.selectbox("Origin Airport", le_dict["Origin_Airport"].classes_)
        destination = st.selectbox("Destination Airport", le_dict["Destination_Airport"].classes_)
        sched_dep = st.slider("Scheduled Departure (Hour)", 0, 23, 10)
        sched_arr = st.slider("Scheduled Arrival (Hour)", 0, 23, 12)
        distance = st.number_input("Distance (km)", value=1000)
        weather = st.selectbox("Weather Conditions", le_dict["Weather_Conditions"].classes_)
        day_of_week = st.selectbox("Day of Week", ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])
        is_weekend = day_of_week in ["Saturday", "Sunday"]
        submit = st.form_submit_button("Predict")

        if submit:
            input_data = pd.DataFrame([{
                "Airline": le_dict["Airline"].transform([airline])[0],
                "Origin_Airport": le_dict["Origin_Airport"].transform([origin])[0],
                "Destination_Airport": le_dict["Destination_Airport"].transform([destination])[0],
                "Scheduled_Departure": sched_dep,
                "Scheduled_Arrival": sched_arr,
                "Distance_km": distance,
                "Weather_Conditions": le_dict["Weather_Conditions"].transform([weather])[0],
                "Day_of_Week": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].index(day_of_week),
                "Is_Weekend": int(is_weekend)
            }])

            delay_prob = clf.predict_proba(input_data)[0][1]
            predicted_minutes = reg.predict(input_data)[0]

            st.markdown(f"### üìå Delay Probability: `{delay_prob:.2f}`")
            st.markdown(f"### ‚è±Ô∏è Predicted Delay (minutes): `{predicted_minutes:.1f} min`")

else:
    st.info("Upload a dataset to begin.")